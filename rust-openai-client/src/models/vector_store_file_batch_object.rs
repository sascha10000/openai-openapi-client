/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// VectorStoreFileBatchObject : A batch of files attached to a vector store.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VectorStoreFileBatchObject {
    /// The identifier, which can be referenced in API endpoints.
    #[serde(rename = "id")]
    pub id: String,
    /// The object type, which is always `vector_store.file_batch`.
    #[serde(rename = "object")]
    pub object: Object,
    /// The Unix timestamp (in seconds) for when the vector store files batch was created.
    #[serde(rename = "created_at")]
    pub created_at: i32,
    /// The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.
    #[serde(rename = "vector_store_id")]
    pub vector_store_id: String,
    /// The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "file_counts")]
    pub file_counts: Box<models::VectorStoreFileBatchObjectFileCounts>,
}

impl VectorStoreFileBatchObject {
    /// A batch of files attached to a vector store.
    pub fn new(id: String, object: Object, created_at: i32, vector_store_id: String, status: Status, file_counts: models::VectorStoreFileBatchObjectFileCounts) -> VectorStoreFileBatchObject {
        VectorStoreFileBatchObject {
            id,
            object,
            created_at,
            vector_store_id,
            status,
            file_counts: Box::new(file_counts),
        }
    }
}
/// The object type, which is always `vector_store.file_batch`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "vector_store.files_batch")]
    VectorStorePeriodFilesBatch,
}

impl Default for Object {
    fn default() -> Object {
        Self::VectorStorePeriodFilesBatch
    }
}
/// The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "failed")]
    Failed,
}

impl Default for Status {
    fn default() -> Status {
        Self::InProgress
    }
}


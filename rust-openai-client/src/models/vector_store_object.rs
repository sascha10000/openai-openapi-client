/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// VectorStoreObject : A vector store is a collection of processed files can be used by the `file_search` tool.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VectorStoreObject {
    /// The identifier, which can be referenced in API endpoints.
    #[serde(rename = "id")]
    pub id: String,
    /// The object type, which is always `vector_store`.
    #[serde(rename = "object")]
    pub object: Object,
    /// The Unix timestamp (in seconds) for when the vector store was created.
    #[serde(rename = "created_at")]
    pub created_at: i32,
    /// The name of the vector store.
    #[serde(rename = "name")]
    pub name: String,
    /// The total number of bytes used by the files in the vector store.
    #[serde(rename = "usage_bytes")]
    pub usage_bytes: i32,
    #[serde(rename = "file_counts")]
    pub file_counts: Box<models::VectorStoreObjectFileCounts>,
    /// The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "expires_after", skip_serializing_if = "Option::is_none")]
    pub expires_after: Option<Box<models::VectorStoreExpirationAfter>>,
    /// The Unix timestamp (in seconds) for when the vector store will expire.
    #[serde(rename = "expires_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub expires_at: Option<Option<i32>>,
    /// The Unix timestamp (in seconds) for when the vector store was last active.
    #[serde(rename = "last_active_at", deserialize_with = "Option::deserialize")]
    pub last_active_at: Option<i32>,
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
    #[serde(rename = "metadata", deserialize_with = "Option::deserialize")]
    pub metadata: Option<serde_json::Value>,
}

impl VectorStoreObject {
    /// A vector store is a collection of processed files can be used by the `file_search` tool.
    pub fn new(id: String, object: Object, created_at: i32, name: String, usage_bytes: i32, file_counts: models::VectorStoreObjectFileCounts, status: Status, last_active_at: Option<i32>, metadata: Option<serde_json::Value>) -> VectorStoreObject {
        VectorStoreObject {
            id,
            object,
            created_at,
            name,
            usage_bytes,
            file_counts: Box::new(file_counts),
            status,
            expires_after: None,
            expires_at: None,
            last_active_at,
            metadata,
        }
    }
}
/// The object type, which is always `vector_store`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "vector_store")]
    VectorStore,
}

impl Default for Object {
    fn default() -> Object {
        Self::VectorStore
    }
}
/// The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "expired")]
    Expired,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Expired
    }
}


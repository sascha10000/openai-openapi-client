/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateBatchRequest {
    /// The ID of an uploaded file that contains requests for the new batch.  See [upload file](/docs/api-reference/files/create) for how to upload a file.  Your input file must be formatted as a [JSONL file](/docs/api-reference/batch/requestInput), and must be uploaded with the purpose `batch`. The file can contain up to 50,000 requests, and can be up to 100 MB in size. 
    #[serde(rename = "input_file_id")]
    pub input_file_id: String,
    /// The endpoint to be used for all requests in the batch. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
    #[serde(rename = "endpoint")]
    pub endpoint: Endpoint,
    /// The time frame within which the batch should be processed. Currently only `24h` is supported.
    #[serde(rename = "completion_window")]
    pub completion_window: CompletionWindow,
    /// Optional custom metadata for the batch.
    #[serde(rename = "metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Option<std::collections::HashMap<String, String>>>,
}

impl CreateBatchRequest {
    pub fn new(input_file_id: String, endpoint: Endpoint, completion_window: CompletionWindow) -> CreateBatchRequest {
        CreateBatchRequest {
            input_file_id,
            endpoint,
            completion_window,
            metadata: None,
        }
    }
}
/// The endpoint to be used for all requests in the batch. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Endpoint {
    #[serde(rename = "/v1/chat/completions")]
    ChatSlashCompletions,
    #[serde(rename = "/v1/embeddings")]
    Embeddings,
    #[serde(rename = "/v1/completions")]
    Completions,
}

impl Default for Endpoint {
    fn default() -> Endpoint {
        Self::ChatSlashCompletions
    }
}
/// The time frame within which the batch should be processed. Currently only `24h` is supported.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CompletionWindow {
    #[serde(rename = "24h")]
    Variant24h,
}

impl Default for CompletionWindow {
    fn default() -> CompletionWindow {
        Self::Variant24h
    }
}


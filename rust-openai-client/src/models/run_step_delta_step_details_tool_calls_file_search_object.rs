/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunStepDeltaStepDetailsToolCallsFileSearchObject {
    /// The index of the tool call in the tool calls array.
    #[serde(rename = "index")]
    pub index: i32,
    /// The ID of the tool call object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The type of tool call. This is always going to be `file_search` for this type of tool call.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// For now, this is always going to be an empty object.
    #[serde(rename = "file_search")]
    pub file_search: serde_json::Value,
}

impl RunStepDeltaStepDetailsToolCallsFileSearchObject {
    pub fn new(index: i32, r#type: Type, file_search: serde_json::Value) -> RunStepDeltaStepDetailsToolCallsFileSearchObject {
        RunStepDeltaStepDetailsToolCallsFileSearchObject {
            index,
            id: None,
            r#type,
            file_search,
        }
    }
}
/// The type of tool call. This is always going to be `file_search` for this type of tool call.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "file_search")]
    FileSearch,
}

impl Default for Type {
    fn default() -> Type {
        Self::FileSearch
    }
}

